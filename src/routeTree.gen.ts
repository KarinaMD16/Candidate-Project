/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PerfilImport } from './routes/Perfil'
import { Route as IndexImport } from './routes/index'
import { Route as authRegisterImport } from './routes/(auth)/Register'
import { Route as authLoginImport } from './routes/(auth)/Login'

// Create/Update Routes

const PerfilRoute = PerfilImport.update({
  id: '/Perfil',
  path: '/Perfil',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/(auth)/Register',
  path: '/Register',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/Login',
  path: '/Login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Perfil': {
      id: '/Perfil'
      path: '/Perfil'
      fullPath: '/Perfil'
      preLoaderRoute: typeof PerfilImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/Login': {
      id: '/(auth)/Login'
      path: '/Login'
      fullPath: '/Login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/Register': {
      id: '/(auth)/Register'
      path: '/Register'
      fullPath: '/Register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Perfil': typeof PerfilRoute
  '/Login': typeof authLoginRoute
  '/Register': typeof authRegisterRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Perfil': typeof PerfilRoute
  '/Login': typeof authLoginRoute
  '/Register': typeof authRegisterRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Perfil': typeof PerfilRoute
  '/(auth)/Login': typeof authLoginRoute
  '/(auth)/Register': typeof authRegisterRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/Perfil' | '/Login' | '/Register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/Perfil' | '/Login' | '/Register'
  id: '__root__' | '/' | '/Perfil' | '/(auth)/Login' | '/(auth)/Register'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PerfilRoute: typeof PerfilRoute
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PerfilRoute: PerfilRoute,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Perfil",
        "/(auth)/Login",
        "/(auth)/Register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Perfil": {
      "filePath": "Perfil.tsx"
    },
    "/(auth)/Login": {
      "filePath": "(auth)/Login.tsx"
    },
    "/(auth)/Register": {
      "filePath": "(auth)/Register.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
